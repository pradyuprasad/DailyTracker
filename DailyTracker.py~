import matplotlib.pyplot as plt
import wget
import pandas as pd
import os
import numpy as np
from datetime import date

filelist = [ f for f in os.listdir(os.getcwd()) if f.endswith(".csv") ]
for f in filelist:
    os.remove(os.path.join(os.getcwd(), f))

URL = 'https://docs.google.com/spreadsheets/d/1nCNc1TwCi3XKPzmFTA1oVVBx1zR5Q8YHYAvTmTt65cQ/export?format=csv&gid=0'
filename = wget.download(URL)
df = pd.read_csv(filename)
Date = df.columns[0]
TotalTime = df.columns[1]
TimeStudied = df.columns[2]
PercentageTime = df.columns[3]
Topic = df.columns[4]

def preprocess_time_string(time_str):
    parts = time_str.split(':')
    # Pad the hour component with a leading zero if it has less than two digits
    if len(parts[0]) < 2:
        parts[0] = '0' + parts[0]
    return ':'.join(parts)

df[Date] = pd.to_datetime(df[Date])
df[TotalTime] = pd.to_timedelta(df[TotalTime].apply(lambda td: pd.Timedelta(preprocess_time_string(str(td)))))
df[TimeStudied] = pd.to_timedelta(df[TimeStudied].apply(lambda td: pd.Timedelta(preprocess_time_string(str(td)))))
today = pd.to_datetime('now')
two_weeks_ago = today - pd.Timedelta(days=14)

df = df[df[Date] >two_weeks_ago ]


def plot_daily_study_time():
    daily_study_time = df.groupby(Date)[TimeStudied].sum()

    # Convert 'TimeStudied' from Timedelta to total minutes for plotting
    daily_study_time_hours = daily_study_time.dt.total_seconds() / 3600  # Converts to minutes

    # Plotting
    plt.figure(figsize=(10, 6))
    plt.bar(daily_study_time_hours.index,daily_study_time_hours)

    plt.title('Total Time Studied Each Day')
    plt.xlabel('Date')
    plt.ylabel('Total Time Studied (Hours)')
    plt.axhline(y = 4.0, linestyle='-', label = 'target', color='red')
    plt.ylim(0, 6.0)
    plt.xticks(rotation=90)  # Rotate the date labels for readability
    plt.tight_layout()
    plt.legend()
    plt.legend(loc='upper left', bbox_to_anchor=(1, 1))
    plt.show()


def plot_average_focus_time():
    weighted_sum = df.groupby(Topic).apply(lambda x: (x[PercentageTime] * x[TotalTime].dt.total_seconds()).sum())
    total_time_per_topic = df.groupby(Topic)[TotalTime].sum().dt.total_seconds()
    weighted_avg_study_percent = weighted_sum / total_time_per_topic

    # Sorting the weighted average study percentages in decreasing order
    sorted_weighted_avg_study_percent = weighted_avg_study_percent.sort_values(ascending=False)

    # Plotting the bar graph
    plt.figure(figsize=(10, 6))
    plt.bar(sorted_weighted_avg_study_percent.index, sorted_weighted_avg_study_percent, color='skyblue')

    plt.title('Weighted Average Study Time Percentage by Topic (Since college started)')
    plt.xlabel('Topic')
    plt.ylabel('Weighted Average Study Time (%)')
    plt.xticks(rotation=90)  # Rotate the topic labels for readability
    plt.grid(axis='y')
    plt.ylim([0.8, sorted_weighted_avg_study_percent.max() + 0.1])  # Setting the y-axis to start at 0.8
    plt.tight_layout()

    plt.show()

def plot_daily_study_time_by_topic():
    # Grouping the data by Date and Topic and summing up TimeStudied
    grouped_data = df.groupby([Date, Topic])[TimeStudied].sum().reset_index()

    # Convert 'TimeStudied' from Timedelta to total hours
    grouped_data[TimeStudied] = grouped_data[TimeStudied].dt.total_seconds() / 3600

    # Pivoting the data for plotting
    pivot_data = grouped_data.pivot(index=Date, columns=Topic, values=TimeStudied).fillna(0)

    # Create a complete date range for the dataset
    date_range = pd.date_range(start=pivot_data.index.min(), end=pivot_data.index.max())

    # Reindex the pivot table to include the full date range, filling missing values with 0
    pivot_data = pivot_data.reindex(date_range, fill_value=0)

    # Format the dates to exclude the time component
    pivot_data.index = pivot_data.index.date

    # Plotting the stacked bar graph
    plt.figure(figsize=(10, 6))
    pivot_data.plot(kind='bar', stacked=True, ax=plt.gca(), legend=False)
    plt.axhline(y=4.0, linestyle='-', label='target', color='red')
    plt.title('Daily Study Time by Topic')
    plt.xlabel('Date')
    plt.ylabel('Total Time Studied (Hours)')
    plt.xticks(rotation=90)  # Rotate the date labels for readability
    plt.legend(title='Topic', loc='upper left', bbox_to_anchor=(1, 1))
    plt.tight_layout()
    plt.show()


def plot_study_distribution_on_day(specific_date):
    """
    Plots a pie chart of the distribution of study time by topic for a specific day.

    Parameters:
    specific_date (str): The specific day in the format 'YYYY-MM-DD' to analyze.
    """
    # Filter the dataframe for the specific day
    day_data = df[df[Date] == pd.to_datetime(specific_date)]

    # Group by Topic and sum the TimeStudied, then convert to total minutes
    study_time_by_topic_minutes = day_data.groupby(Topic)[TimeStudied].sum().dt.total_seconds() / 60

    # Function to format the label with percentage and hours and minutes
    def label_format(pct, allvals):
        total_minutes = int(pct / 100. * np.sum(allvals))
        hours = total_minutes // 60
        minutes = total_minutes % 60
        return "{:.1f}%\n({}h {}m)".format(pct, hours, minutes)

    # Plotting the pie chart
    plt.figure(figsize=(8, 8))
    plt.pie(study_time_by_topic_minutes, labels=study_time_by_topic_minutes.index,
            autopct=lambda pct: label_format(pct, study_time_by_topic_minutes),
            startangle=140)
    plt.title(f'Study Time Distribution on {specific_date}')
    plt.axis('equal')  # Equal aspect ratio ensures the pie chart is circular.
    plt.show()


def study_time_last_7_days():
    # Calculate the sum of study time for each topic in the last 7 days
    end_date = pd.to_datetime('today')
    start_date = end_date - pd.Timedelta(days=6)  # Include today in the count, hence 6 days back

    # Filter the dataframe for entries within the last 7 days
    recent_df = df[(df[Date] >= start_date) & (df[Date] <= end_date)]

    # Group by 'Topic' and sum up the 'TimeStudied', converting to hours
    study_time_by_topic = recent_df.groupby(Topic)[TimeStudied].sum().dt.total_seconds() / 3600

    # Sort the study time by topic in descending order
    sorted_study_time_by_topic = study_time_by_topic.sort_values(ascending=False)

    # Display the sorted study times
    print("Study time in the last 7 days by topic (in hours):")
    print(sorted_study_time_by_topic)

def study_time_last_7_days_pie_chart():
    # Calculate the end date as today and the start date as 7 days ago
    end_date = pd.to_datetime('today')
    start_date = end_date - pd.Timedelta(days=6)  # Include today in the count, hence 6 days back

    # Filter the dataframe for entries within the last 7 days
    recent_df = df[(df[Date] >= start_date) & (df[Date] <= end_date)]

    # Group by 'Topic' and sum up the 'TimeStudied', converting to hours
    study_time_by_topic = recent_df.groupby(Topic)[TimeStudied].sum().dt.total_seconds() / 3600

    # Sort topics by study time to identify smaller slices
    study_time_by_topic_sorted = study_time_by_topic.sort_values(ascending=False)

    # Function to format the label with percentage and hours and minutes
    def label_format(pct, allvals):
        total_hours = pct / 100. * np.sum(allvals)
        hours = int(total_hours)
        minutes = int((total_hours - hours) * 60)
        return "{:.1f}%\n({}h {}m)".format(pct, hours, minutes)

    # Plotting the pie chart
    fig, ax = plt.subplots(figsize=(10, 8))
    wedges, texts, autotexts = ax.pie(study_time_by_topic_sorted, autopct=lambda pct: label_format(pct, study_time_by_topic_sorted),
                                      startangle=140, pctdistance=0.85)

    # Pull out the smaller slices a bit for better visibility
    pull_out = [0.1 if autotext.get_text() and float(autotext.get_text().split('%')[0]) < 5 else 0 for autotext in autotexts]
    for i, p in enumerate(wedges):
        p.set_radius(1)
        #if pull_out[i] > 0:
            #p.set_pull(pull_out[i])

    # Make the labels and percentages on the slices easier to read
    plt.setp(autotexts, size=8, weight="bold", color="white")
    plt.setp(texts, size=8)

    # Annotate with arrows for smaller slices
    for i, p in enumerate(wedges):
        if pull_out[i] > 0:  # Only annotate the pulled out slices
            ang = (p.theta2 - p.theta1)/2. + p.theta1
            y = np.sin(np.deg2rad(ang))
            x = np.cos(np.deg2rad(ang))
            horizontalalignment = {-1: "right", 1: "left"}[int(np.sign(x))]
            connectionstyle = f"angle,angleA=0,angleB={ang}"
            ax.annotate(study_time_by_topic_sorted.index[i], xy=(x, y), xytext=(1.5*np.sign(x), 1.4*y),
                        horizontalalignment=horizontalalignment, arrowprops=dict(arrowstyle="->", connectionstyle=connectionstyle))

    plt.title('Study Time Distribution by Topic in the Last 7 Days')
    plt.axis('equal')  # Equal aspect ratio ensures the pie chart is circular.
    plt.show()

# Call the function to display the study time in the last 7 days by topic in a pie chart

def study_time_last_7_days():
    # Calculate the sum of study time for each topic in the last 7 days
    end_date = pd.to_datetime('today')
    start_date = end_date - pd.Timedelta(days=6)  # Include today in the count, hence 6 days back

    # Filter the dataframe for entries within the last 7 days
    recent_df = df[(df[Date] >= start_date) & (df[Date] <= end_date)]

    # Group by 'Topic' and sum up the 'TimeStudied', converting to hours
    study_time_by_topic = recent_df.groupby(Topic)[TimeStudied].sum().dt.total_seconds() / 3600

    # Sort the study time by topic in descending order
    sorted_study_time_by_topic = study_time_by_topic.sort_values(ascending=False)

    # Display the sorted study times
    print("Study time in the last 7 days by topic (in hours):")
    print(sorted_study_time_by_topic)

# Call the function to display the study time in the last 7 days by topic
study_time_last_7_days()

